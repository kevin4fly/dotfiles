" vundle {{{

" be improved
set nocompatible
" required!
filetype off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let vundle manage vundle
Plugin 'gmarik/Vundle.vim'

" youcompleteme is a fast, as-you-type, fuzzy-search code completion engine
Plugin 'Valloric/YouCompleteMe'

" swtich between source files and header files quickly
Plugin 'vim-scripts/a.vim'

" auto check syntax as you save files
Plugin 'scrooloose/syntastic'

" complete function parameters
Plugin 'kevin4fly/code_complete'

" complete code snippets
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'

" show project tags
Plugin 'majutsushi/tagbar'

" match tags (HTML)
Plugin 'valloric/MatchTagAlways'

" auto update your tags
Plugin 'craigemery/vim-autotag'

" project tree
Plugin 'scrooloose/nerdtree'

" search the files, buffers and mru files with fuzzy way
Plugin 'kien/ctrlp.vim'
" search the files, buffers and mru files
Plugin 'Shougo/unite.vim'

" set the git wrapper
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-abolish'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-repeat'

" set the status line
"Plugin 'Lokaltog/vim-powerline'
" Lean & mean status/tabline for vim that's light as air
Plugin 'bling/vim-airline'

" set the color scheme
Plugin 'tomasr/molokai'

" insert or delete brackets, parens, quotes in pair
Plugin 'Raimondi/delimitMate'

" auto update markdown in web browser
Plugin 'suan/vim-instant-markdown'

" sytax highlight for markdown file
Plugin 'plasticboy/vim-markdown'

" if airline's tabline feature cannot be used, these below two can be used as
" a replacement to show buffers
" Plugin 'bling/vim-bufferline'
Plugin 'techlivezheng/vim-plugin-minibufexpl'
" kill the active buffer without close the window
Plugin 'moll/vim-bbye'

" set the undotree visually
Plugin 'sjl/gundo.vim'

" show git diff in the 'gutter' way
Plugin 'airblade/vim-gitgutter'

" use signs to indicate added, modified and removed lines
Plugin 'mhinz/vim-signify'

" show indent line
Plugin 'Yggdroot/indentLine'

" toggle, display and navigate marks
Plugin 'kshenoy/vim-signature'

" provides a much simpler way to use some motions
Plugin 'Lokaltog/vim-easymotion'

" complete python class, function and function's parameters and more
Plugin 'davidhalter/jedi-vim'

" integrate between Vim and IPython
" Plugin 'ivanov/vim-ipython'

" fold for python
Plugin 'tmhedberg/SimpylFold'

" show pydoc
Plugin 'fs111/pydoc.vim'

" enhanced highlight python systax
Plugin 'hdima/python-syntax'

" enhanced highlight cpp systax
Plugin 'octol/vim-cpp-enhanced-highlight'

" toggle comment
Plugin 'tomtom/tcomment_vim'
" Plugin 'tpope/vim-commentary'

" lisp env
Plugin 'kovisoft/slimv'
" rainbow
Plugin 'amdt/vim-niji'
" highlight syntax
" Plugin 'newlisp'

" align text
Plugin 'godlygeek/tabular'

" sytax highlight for nginx
Plugin 'evanmiller/nginx-vim-syntax'

" sytax highlight for getmailrc/msmtprc
Plugin 'vim-scripts/getmail.vim'
Plugin 'wogong/msmtp.vim'

" required!
call vundle#end()
filetype plugin indent on

" }}}
" general {{{

" set map leader for easy combination
let mapleader = ","
let g:mapleader = ","
" set timeout for map leader
set timeout timeoutlen=1000 ttimeoutlen=50

" fast saving
nnoremap <leader>w :w!<cr>
" fast reloading the .vimrc
nnoremap <silent><leader>vv  :source ~/.vimrc<cr> <bar>
                           \ :filetype detect<cr> <bar>
                           \ :execute ":echo 'vimrc reloaded'"<cr>
" fast editing the .vimr
nnoremap <silent><leader>v :e ~/.vimrc<cr>
" reload the .vimrc automatically if it is modified
autocmd! bufwritepost .vimrc source ~/.vimrc

" goto command line mode
nnoremap <leader><leader> :
vnoremap <leader><leader> :

" mapping jj to esc on insert/command/operator-pending mode
noremap! jj <c-c>
onoremap jj <ESC>

" mapping c-a to the beginning of command line to align with bash
cnoremap <c-a> <c-b>

" remap vim 0 to first non-blank character
nnoremap 0 ^
nnoremap H ^
nnoremap L $

" scroll line without move cursor position
" nnoremap <silent> J 1<c-d>:set scroll=0<cr>
" nnoremap <silent> K 1<c-u>:set scroll=0<cr>

" join line
" nnoremap <leader>j :join<cr>

" treat long lines as break lines
nnoremap j gj
nnoremap k gk
" easy move around in insert and command mode
inoremap <c-j> <down>
inoremap <c-k> <up>
noremap! <c-h> <left>
noremap! <c-l> <right>
" delete a char in insert and command mode
noremap! <c-f> <bs>

" consistent with readline
inoremap <c-a> <ESC>I
inoremap <c-e> <ESC>A
inoremap <c-o> <ESC>o

" for easy search
nnoremap <space> /
nnoremap <leader><space> ?

" trigger highlight or not after searching
nnoremap <silent> <leader><cr> :if &hlsearch <bar>
                              \    set nohlsearch <bar>
                              \ else <bar>
                              \    set hlsearch <bar>
                              \ endif<cr>

" uniform copy
nnoremap Y y$

if has('unnamedplus')
" By default, Vim will not use the system clipboard when yanking/pasting to
" the default register. This option makes Vim use the system default
" clipboard.
" Note that on X11, there are _two_ system clipboards: the "standard" one, and
" the selection/mouse-middle-click one. Vim sees the standard one as register
" '+' (and this option makes Vim use it by default) and the selection one as
" '*'.
" See :h 'clipboard' for details.
    set clipboard=unnamedplus,unnamed
else
" Vim now also uses the selection system clipboard for default yank/paste.
    set clipboard+=unnamed
endif

" select all text in normal mode
nnoremap <c-a> ggVG
" utilize '+' register to handle copy and paste on system clipboard
" copy text in visual mode
vnoremap <c-c> "+y
" paste text in insert/command mode
cnoremap <c-v> <c-r>+
inoremap <c-v> <c-r><c-p>+

" make paste works fine
set pastetoggle=<F2>

" format the text in normal and visual mode
nnoremap Q gq
vnoremap Q gq

" chars form pairs
set matchpairs=(:),[:],{:},<:>,\':\',":",`:`

" jump between braces
nnoremap <tab> %
vnoremap <tab> %

" Keep search matches in the middle of the window.
" zz centers the screen on the cursor, zv unfolds any fold if the cursor
" suddenly appears inside a fold.
nnoremap * *zzzv
nnoremap # #zzzv
nnoremap n nzzzv
nnoremap N Nzzzv

" g<c-]> is jump to tag if there's only one matching tag, but show list of
" options when there is more than one definition
"nnoremap <leader>g g<c-]>

" These create newlines like o and O but stay in normal mode
nnoremap <silent> zj o<Esc>k
nnoremap <silent> zk O<Esc>j
nnoremap <silent> zh X
nnoremap <silent> zl i <Esc>

" cindent is a bit too smart for its own good and triggers in text files when
" you're typing inside parens and then hit enter; it aligns the text with the
" opening paren and we do NOT want this in text files!
autocmd FileType text,markdown,gitcommit set nocindent
autocmd FileType markdown,gitcommit setlocal spell! spelllang=en_us

" Toggle and untoggle spell checking
noremap <leader>ss :setlocal spell! spelllang=en_us<cr>
" spelling shortcuts using <leader>
" ]s next misspelled word
" [s previous misspelled word
" zg add to dict
" z= get suggestions
nnoremap <leader>sn ]s
nnoremap <leader>sp [s
nnoremap <leader>sa zg
nnoremap <leader>su z=

" open quickfix windows and list the errors
nnoremap <leader>cc :cw<cr>
" skip to next error
nnoremap <leader>n :cn<cr>
" skip to previous error
nnoremap <leader>p :cp<cr>
nnoremap <leader>cm :w<cr>:make<cr>

" reload the file(log files may be changed outside)
nnoremap <leader>rr :edit<cr> <bar>
                 \  :exe ":echo '<c-r>% reloaded'"<cr>

" compile source code
nnoremap <F5> :w<cr> <bar>
            \ :make<cr>
" run python
autocmd FileType python nnoremap <F6> :!ipython %<cr>

" write the file to disk even if we forget to 'sudo'
nnoremap <leader>so :w !sudo tee % >/dev/null

" }}}
" user interface {{{

" Unicode support (taken from http://vim.wikia.com/wiki/Working_with_Unicode)
if has("multi_byte")
  if &termencoding == ""
    let &termencoding = &encoding
  endif
  set encoding=utf-8
  setglobal fileencoding=utf-8
  set fileencodings=ucs-bom,utf-8,latin1
endif

" set the file format
set fileformat=unix

" auto detect to determin the end-of-file<EOL> formats
set fileformats=unix,dos,mac

" enable syntax highlighting
syntax enable
set t_Co=256

" for molokai
set background=dark
colorscheme molokai

" for solarized
"colorscheme solarized
"let g:solarized_termcolors=256

" for tomorrow-night
"colorscheme Tomorrow-Night
"colorscheme Tomorrow-Night-Eighties

" make a backup before overwriting a file
set writebackup
" leave it around even after the file has been successfully writen
" set backup
set nobackup
" save swap file in case of crash
set swapfile
" set directory for swap file
set dir=~/.vimtmp,/var/tmp,/tmp,$TEMP

" keep undo file
set undofile
set undolevels=1000
" set directory for undo file
set undodir=~/.vimtmp,/var/tmp,/tmp,$TEMP

" keep the history of command line
set history=1000

" set viminfo
set viminfo='50,<500,s20,h,n~/.vimtmp/viminfo

" show lines number
set number

" enable mouse if needed
if has('mouse')
    set mouse=a
endif

" use spaces instead of tabs, which mean tabs will expand to spaces
set expandtab

" don't expand <tab> in .snippets file
autocmd bufenter *.snippets set noexpandtab

" be smart when using tabs
set smarttab
" set 1 tab moves the cusor 4 columns right when loading the file
set tabstop=4
" set indent value when reindent operation (<<, >>)
set shiftwidth=4
" set 1 tab moves the cusor 4 columns right in insert mode
set softtabstop=4

" copy indent from current line to new line
set autoindent
" smart indent
set smartindent
" copy indent
set copyindent

" tabs and eols
set listchars+=tab:▸\ ,eol:$
" spaces
set listchars+=trail:⋅,nbsp:⋅

" wrap lines to see the whole line instead of truncation or scroll
set wrap
" enforces a specified line-length and auto inserts hard line breaks when we
" reach the limit; in Normal mode, you can reformat the current paragraph with
" Qap (mapped Q to gq already)
set textwidth=78

" this makes the color after the textwidth column highlighted
set colorcolumn=+1

" highlight cursor line/colomn
set cursorline
" set cursorcolumn
" show cursorline dynamically
nnoremap <silent> <leader>co :if &cursorcolumn <bar>
                            \   set nocursorcolumn <bar>
                            \ else <bar>
                            \   set cursorcolumn <bar>
                            \ endif<cr>

" set vertical line at the end
set colorcolumn=78

" auto read if file is changed outside
set autoread
" auto write if file is changed outside
set autowriteall

" set popup menu style, without preview window
set completeopt=menu,menuone,longest

" set minimal number of lines to keep above and below the cursor
set scrolloff=7

" When you type the first tab, it will complete as much as possible, the
" second tab hit will provide a list, the third and subsequent tabs will cycle
" through completion options so you can complete the file without further keys
"set wildmode=longest,list,full
set wildmode=full
" set command line completion with <tab>
set wildmenu

" ignore compiled files, backup files and vcs files
set wildignore=*.o,*~,*.pyc
if has("win16") || has("win32")
    set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store
else
    set wildignore+=.git\*,.hg\*,.svn\*
endif

" configure backspace so it acts as it should act
set backspace=eol,start,indent
" allow keys to move to pre/next line if needed
set whichwrap=b,s,<,>,h,l

" ignore case when searching
set ignorecase

" search to be smart about cases
set smartcase

" highlight search results
set hlsearch

" show matched string while typing
set incsearch

" this makes search/replace global by default
set gdefault

" set fold method: marker
" set foldmethod=marker
" all folds open by default
set foldlevelstart=99

" turn magic on for regular expression
set magic

" show matching brackets when text indicator is over them
set showmatch

" without showing matched brackets
" keep it here since blinking cursor is boring when matched
let loaded_matchparen = 1

" set tenths of a second to blink when matching brackets
set matchtime=1

" set no annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=

" tries to avoid those annoying "hit enter to continue" messages
" if it still doesn't help with certain commands, add a second <cr>
" at the end of the map command
set shortmess=a

" remove a comment leader when joining lines
set formatoptions+=j

" don't use alt for menu
set winaltkeys=no

" }}}
" buffer, window and tab {{{

" hidden buffer when it is abandoned instead of unload from memory
set hidden

" move to next buffer
nnoremap <c-j> :bnext<cr>
" nove to previous buffer
nnoremap <c-k> :bprevious<cr>
" close the current buffer
nnoremap <leader>dd :Bdelete<cr>
" close all the buffers: from #1 to #1000
nnoremap <leader>da :1,10000 bd!<cr>

" quit windows without saving
nnoremap <silent><leader>x :quit!<cr>
" close tab or window
nnoremap <silent><leader>z :close<cr>
" save all the files and then quit
nnoremap <silent><leader>ca :wqa!<cr>

" move between windows
" nnoremap <c-j> <c-w>j
" nnoremap <c-k> <c-w>k
" nnoremap <c-h> <c-w>h
" nnoremap <c-l> <c-w>l

" new vertical split file put to right
"set splitright
" show this kinds of file on the left side
autocmd filetype help,man,qf wincmd L
" show grep result
autocmd QuickFixCmdPost *grep* cwindow

" remember info about open buffers on close
"set viminfo^=%

" useful mappings for managing tab and window
" new tab
nnoremap <leader>tn :tabnew<cr>
" new window
nnoremap <leader>vn :vnew<cr>
" tab only
nnoremap <leader>to :tabonly<cr>
" tab next/previous
nnoremap <c-h> :tabprevious<cr>
nnoremap <c-l> :tabnext<cr>
" window only
nnoremap <leader>wo :only<cr>
" tab close
"nnoremap <leader>tc :tabclose<cr>

" open help text
nnoremap <leader>h :help<cr>

" opens a new tab with the current buffer's path
" super useful when editing files in the same directory
nnoremap <leader>te :tabedit <c-r>=expand("%:p:h")<cr>/
nnoremap <leader>ve :vsplit <c-r>=expand("%:p:h")<cr>/
nnoremap <leader>se :split <c-r>=expand("%:p:h")<cr>/
nnoremap <leader>ce :split <c-r>=expand("%:p:h")<cr>/

" switch cwd to the directory of the open buffer
nnoremap <leader>cd :cd %:p:h<cr>:pwd<cr>

" specify the behavior when switching between buffers
set switchbuf=useopen,usetab
" show tab page labels always (we have airline tabline)
"set showtabline=2

" return to last edit position when opening files (you want this!)
autocmd bufreadpost *
            \ if line("'\"") > 0 && line("'\"") <= line("$") |
            \   execute "normal! g`\"" |
            \ endif

" }}}
" tags and cscope {{{

" generating tags in current directory
nnoremap <silent> <leader>ff
            \ :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<cr>
" adding tags in current directory or above and in all subdirectories
set tags=./tags,tags;

" adding tags in /usr/include for system API using
autocmd FileType c,cpp set tags+=/usr/include/tags

" adding tags in /lib/modules/$(uname -r)/build/include/linux
" for modules API using
autocmd FileType c,cpp,h
    \ set tags+=/lib/modules/2.6.32-38-generic/build/include/linux/tags

" mapping for generating cscope files
nnoremap <c-F11> :!cscope -Rbkq<cr>
if has("cscope")
    "set the cscope location
    set csprg=/usr/bin/cscope
    "set the search order: tags file is searched first, followed by cscope database
    set csto=1
    "use :cstag instead of the default :tag behavior
    set cst
    set nocsverb
    " add any database in current directory
    if filereadable("cscope.out")
        cs add cscope.out
    endif
    "show the successful or failure massage when adding the cscope database
    set csverb
endif

" mapping for cscope
nnoremap <c-\>s :cs find s <c-r>=expand("<cword>")<cr><cr>
nnoremap <c-\>g :cs find g <c-r>=expand("<cword>")<cr><cr>
nnoremap <c-\>c :cs find c <c-r>=expand("<cword>")<cr><cr>
nnoremap <c-\>t :cs find t <c-r>=expand("<cword>")<cr><cr>
nnoremap <c-\>e :cs find e <c-r>=expand("<cword>")<cr><cr>
nnoremap <c-\>f :cs find f <c-r>=expand("<cfile>")<cr><cr>
nnoremap <c-\>i :cs find i ^<c-r>=expand("<cfile>")<cr>$<cr>
nnoremap <c-\>d :cs find d <c-r>=expand("<cword>")<cr><cr>

" }}}
" miscellaneous {{{

" autoload man.vim
"autocmd bufreadpost,bufnewfile *.c,*.h,*.cpp,*.sh runtime! ftplugin/man.vim
runtime! ftplugin/man.vim
autocmd FileType * nnoremap K :Man <cword><cr>

" mapping to run make
nnoremap <silent><F6> :make<cr>
" prevent vim from interpreting Makefile as a modeline
autocmd FileType make set modelines=0

" mapping to vimgrep
nnoremap  <leader>/ :vimgrep /

"}}}
" plugins {{{

" settings for YouCompleteme plugin
inoremap <expr><Enter>  pumvisible() ? "\<c-y>" : "\<Enter>"
" the python module used to compile the editing file
let g:ycm_global_ycm_extra_conf =
\ '~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'
let g:ycm_min_num_identifier_candidate_chars = 4
" add tags file to identifer engine
" let g:ycm_collect_identifiers_from_tags_files = 1
nnoremap <leader>y :YcmForceCompileAndDiagnostics<cr>
nnoremap <leader>pg :YcmCompleter GoTo<CR>
nnoremap <leader>pd :YcmCompleter GoToDefinition<CR>
nnoremap <leader>pc :YcmCompleter GoToDeclaration<CR>
" set a absolute path to path for ycmd server since we use pyenv to change the
" version of python causing it crash
let g:ycm_path_to_python_interpreter = '/usr/bin/python2.7'

" set <tab> to trigger snippet, code completion and more
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
function! g:UltiSnips_Complete()
    if pumvisible()
        return "\<c-n>"
    endif
    call UltiSnips#ExpandSnippetOrJump()
    if g:ulti_expand_or_jump_res == 0
        "if pumvisible()
        "    return "\<c-n>"
        "else
            call UltiSnips#JumpForwards()
            if g:ulti_jump_forwards_res == 0
                return CodeComplete() . "\<c-r>=SwitchRegion()\<cr>"
                "return CodeComplete() . SwitchRegion()
            endif
        "endif
    endif
    return ""
endfunction

autocmd BufEnter *
    \ exec "inoremap <buffer> <silent> " . g:UltiSnipsExpandTrigger .
    \ " <c-r>=g:UltiSnips_Complete()<cr>"

" setting for a.vim
nnoremap <silent> <leader>aa :A<cr>

" settings for syntastic
let g:syntastic_error_symbol = '✗'
let g:syntastic_warning_symbol = '⚠'
let g:syntastic_always_populate_loc_list = 1

" settings for tagbar
nnoremap <silent> <leader>ta :TagbarToggle<cr>

" Tagbar omitting the short help
let g:tagbar_compact = 1

" settings for nerdtree
nnoremap <silent> <leader>tt :NERDTreeToggle<cr>
" disalbe show help
let NERDTreeMinimalUI=1

" settings for powerline
" height of the command bar
set cmdheight=2
" always show the status line
set laststatus=2
set showcmd
" show the full path in the status line
let g:Powerline_stl_path_style = 'full'
"let g:Powerline_symbols = 'fancy'

" settings for delimitMate
let delimitMate_autoclose = 1
au FileType c,cpp let b:delimitMate_autoclose = 0
let delimitMate_matchpairs = "(:),[:],{:}"
let delimitMate_quotes = "\" ' ` "
let delimitMate_expand_cr = 1
let delimitMate_expand_space = 1
let delimitMate_expand_inside_quotes = 1

" settings for ctrlp
let g:ctrlp_max_height = 30

" settings for vim-instant-markdown
"let g:instant_markdown_slow = 1
autocmd BufNewFile,BufReadPost *.md set filetype=markdown

" settings for minibufexplorer
nnoremap <silent> <leader>mm :MBEToggle<cr>

" settings for gundo
nnoremap <silent> <leader>uu :GundoToggle<CR>
let g:gundo_help = 0

" settings for minibufferexplorer
let g:miniBufExplorerAutoStart = 0

" settings for airline
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1

" settings for indentline
nnoremap <silent> <leader>ii :IndentLinesToggle<cr>

" settings for easymotion
let g:EasyMotion_leader_key = '<leader>e'
" Provides the equivalent of <Leader>s, which is forwards/backwards search for
" a character.  has to be 'nmap', 'noremap' doesn't work
nmap s <Plug>(easymotion-s)

" settings for pydoc
let g:pydoc_open_cmd = 'vsplit'
let g:pydoc_highlight=0

" settings for jedi
let g:jedi#auto_vim_configuration = 0
let g:jedi#popup_on_dot = 0
let g:jedi#popup_select_first = 0
let g:jedi#completions_enabled = 0
let g:jedi#completions_command = ""
let g:jedi#show_call_signatures = "1"

let g:jedi#goto_assignments_command = "<leader>pa"
let g:jedi#goto_definitions_command = "<leader>pd"
let g:jedi#documentation_command = "<leader>pk"
let g:jedi#usages_command = "<leader>pu"
nnoremap <leader>pi :Pyimport
let g:jedi#rename_command = "<leader>pr"

" settings for tcomment
let g:tcomment_types={'c':'// %s'}

" settings for tabular
nnoremap <leader>ll :Tab /
vnoremap <leader>ll :Tab /

" settings for fugitive
nnoremap <leader>gg :Gstatus<cr>

" }}}
" auxiliary function {{{

" strip trailing white space except markdown file
fun! StripTrailingWhitespace()
    " don't strip on these filetypes
    if &ft =~ 'markdown'
        return
    endif
    %s/\s\+$//e
endfun
autocmd BufWritePre,FileWritePre *
            \ if &modifiable |
            \    call StripTrailingWhitespace() |
            \ endif

" macro expansion with gcc
" we have to install gnu indent programme, refer to
" http://vim.wikia.com/wiki/Macro_expansion_C/C%2B%2B for more details
function! ExpandCMacro()
    "get current info
    let l:macro_file_name = "__macroexpand__" . tabpagenr()
    let l:file_row = line(".")
    let l:file_name = expand("%")
    let l:file_window = winnr()
    "create mark
    execute "normal! Oint " . l:macro_file_name . ";"
    execute "w"
    "open tiny window ... check if we have already an open buffer for macro
    if bufwinnr( l:macro_file_name ) != -1
        execute bufwinnr( l:macro_file_name) . "wincmd w"
        setlocal modifiable
        execute "normal! ggdG"
    else
        execute "bot 10split " . l:macro_file_name
        execute "setlocal filetype=cpp"
        execute "setlocal buftype=nofile"
        nnoremap <buffer> q :q!<CR>
    endif
    "read file with gcc
    silent! execute "r!gcc -E " . l:file_name
    "keep specific macro line
    execute "normal! ggV/int " . l:macro_file_name . ";$\<CR>d"
    execute "normal! jdG"
    "indent
    execute "%!indent -st -kr"
    execute "normal! gg=G"
    "resize window
    execute "normal! G"
    let l:macro_end_row = line(".")
    execute "resize " . l:macro_end_row
    execute "normal! gg"
    "no modifiable
    setlocal nomodifiable
    "return to origin place
    execute l:file_window . "wincmd w"
    execute l:file_row
    execute "normal!u"
    execute "w"
    "highlight origin line
    let @/ = getline('.')
endfunction

autocmd FileType c,cpp nnoremap <leader>m :call ExpandCMacro()<CR>

" Highlight Class and Function names
function! s:HighlightFunctionsAndClasses()
  syn match cCustomFunc      "\w\+\s*\((\)\@="
  syn match cCustomClass     "\w\+\s*\(::\)\@="

  hi def link cCustomFunc      Function
  hi def link cCustomClass     Function
endfunction

autocmd Syntax * call s:HighlightFunctionsAndClasses()

"}}}
" vim:tw=78:ts=4:sw=4:et:fdm=marker
