#---------------------------------------------------------------
# file:     ~/.tmux.conf
# author:   kevin yun - kevin4fly@gmail.com
#
# strongly recommand the book: tmux Productive Mouse-Free Development.pdf
#---------------------------------------------------------------

# basic {{{

# change prefix key
unbind C-b
set -g prefix C-a
# press <C-s> twice to send prefix to applications
bind-key C-a send-prefix

# change default delay to allow fast keystricks
set -sg escape-time 0
# change default delay to allow operation without prefix-key
set -g repeat-time 2000

# enable 256 colors
set -g default-terminal "screen-256color"
set-window-option -g xterm-keys on
set -g display-time 3000
set -g history-limit 1000

# set vi copy/paste mode
set -g status-keys vi
setw -g mode-keys vi
unbind [
bind ^j copy-mode
unbind p
bind p paste-buffer
bind -t vi-copy 'v' begin-selection
#bind -t vi-copy 'y' copy-selection
bind -t vi-copy 'y' copy-pipe "xclip -sel clip -i"
bind -t vi-copy ^c copy-pipe "xclip -sel clip -i"

# move OS clipboard into tmux paste buffer
bind C-v run "xclip -o | tmux load-buffer - ; tmux paste-buffer" \; \
        display-message "Copied from OS clipboard..."

# below statement doesn't take effect, thus using #35 instead
# ctrl-c to copy the buffer into system clipboard
bind C-c run "tmux show-buffer | xclip -i -sel clipboard" \; \
        display-message "Copied to OS clipboard..."

# reload config
bind r source-file ~/.tmux.conf \; display-message "Config reloaded..."

# switch among different sessions
bind -r ( switch-client -p
bind -r ) switch-client -n

# identify activity in other windows
# setw -g monitor-activity on
# set -g visual-activity on

# show man page in vertical split windor
bind m command-prompt -p "What manual page?" "splitw -h 'exec man %%'"

# }}}
# status bar {{{

# set status bar char-set
set -g status-utf8 on

# set statusbar colors
set -g status-fg default
set -g status-bg default
set -g status-attr bright

# set command line colors
set -g message-fg white
set -g message-bg black
set -g message-attr bright

# set status bar layout and colors
set -g status-left "#[fg=green]#H.#[fg=green]#S"
set -g status-right "#[fg=cyan]%a %k:%M:%S %Y-%m-%d"
set -g status-justify centre
set -g status-left-length 30
set -g status-right-length 140

# set refresh status bar each 1 second
set -g status-interval 1

# }}}
# windows {{{

# change start index to 1
set -g base-index 1

# let | and _ for splitting windows
unbind %
bind | split-window -h
bind _ split-window -v

# browse window easily
bind -r C-h select-window -t :-
bind -r C-l select-window -t :+

# auto window rename
setw -g automatic-rename

# set active window status colors
setw -g window-status-current-fg red

# set window title colors
setw -g window-status-fg default
setw -g window-status-bg default
setw -g window-status-attr dim

# set active window title colors
setw -g window-status-current-fg red
setw -g window-status-current-bg default
setw -g window-status-current-attr bright

# }}}
# panel {{{

# change start index to 1
set -g pane-base-index 1

# let hjkl to traverse pane
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# resize pane
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5

# set pane colors
set -g pane-border-fg colour7
set -g pane-border-bg default
set -g pane-active-border-fg colour9
set -g pane-active-border-bg default

# swap panel
bind ^u swapp -U
bind ^d swapp -D

# maximize and restore panes
unbind +
bind + new-window -d -n tmp \; swap-pane -s tmp.1 \; select-window -t tmp
unbind -
bind - last-window \; swap-pane -s tmp.1 \; kill-window -t tmp

# log output to a text file on demand
bind P pipe-pane -o "cat >>~/#W.log" \; display "Toggled logging to ~/#W.log"

# }}}
# mouse {{{

# enable mouse
set -g mode-mouse on
set -g mouse-select-pane on
set -g mouse-resize-pane on
set -g mouse-select-window on

# Rather than constraining window size to the maximum size of any client
# connected to the *session*, constrain window size to the maximum size of any
# client connected to *that window*. Much more reasonable.
setw -g aggressive-resize on

# }}}

# vim:tw=78:ts=4:sw=4:sts=4:et:fdm=marker:ft=conf
